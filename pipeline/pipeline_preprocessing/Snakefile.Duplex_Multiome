import pandas as pd
import os


sample_name = config["sample_name"]
cellranger_dir = config["cellranger_dir"]
base_dir = config["base_dir"]
cell_barcode_list = config["cell_barcode_list"]
go_dir = config["go_dir"]
reference_genome = config["reference_genome"]
bulk_bam = config["bulk_bam"]
known_snp = config["known_snp"]
strand1_bc = config["strand1_bc"]
strand2_bc = config["strand2_bc"]
masked_region = config["masked_region"]
bulk_bam_list = config["bulk_bam_list"]
het_germline_mutations = config["het_germline_mutations"]
autosomes_bed = config["autosomes_bed"]
max_VAF_clonal_mutation = config["max_VAF_clonal_mutation"]

df = pd.read_table(cell_barcode_list, header = None)
cell_barcodes = df[0].astype(str)
print(sample_name)

# Rule definitions
rule all:
	input:
		calledSites = expand(base_dir + "/read_families/{threshold}/{cell_barcode}.families.analysis.calledSites.bed", cell_barcode=cell_barcodes, threshold=["a2s1", "a2s0", "a2s0_0minReadFamilyLength"]),
		called_variants = expand(base_dir + "/call_variants/Dan/{threshold}/{cell_barcode}.vcf", cell_barcode=cell_barcodes, threshold=["a2s1", "a2s0"]),
		autosomal_variants = expand(base_dir + "/call_variants/filter_germline_mutation/{threshold}/{threshold}_filterGermline.{cell_barcode}.vcf", cell_barcode=cell_barcodes, threshold=["a2s1", "a4s2", "a6s3", "a8s4", "a10s5", "a2s0", "a4s0", "a6s0", "a8s0", "a10s0"]),
		burden = expand(base_dir + "/burden_estimation/Dan/{threshold}_burden_results.txt", threshold=["a2s1", "a4s2", "a6s3", "a8s4", "a10s5"]),
		autosomal_germline_mutations_summary = expand(base_dir + "/call_variants/germline_mutations/{threshold}_germline_mutation_results.txt", threshold=["a2s1", "a4s2", "a6s3", "a8s4", "a10s5"]),
		all_het_germline_mutations_callable_region_summary = expand(base_dir + "/call_variants/all_germline_mutations_callable_region/all_germline_mutations_callable_region_summary_{threshold}.txt", threshold=["a2s1", "a4s2", "a6s3", "a8s4", "a10s5"]),
		read_family_strand_barcode_summary = base_dir + "/read_family_strand_barcode/read_family_strand_barcode_summary.txt",
		read_family_strand_count = expand(base_dir + "/read_family_strand_barcode/all/{cell_barcode}_read_family_strand_barcode.txt", cell_barcode=cell_barcodes),
		read_family_strand_barcode_strand2_only = expand(base_dir + "/read_family_strand_barcode/strand2_only/{cell_barcode}_read_family_strand_barcode.txt", cell_barcode=cell_barcodes),
		burden_withoutDuplexConsensus = expand(base_dir + "/burden_estimation/Dan/{threshold}_burden_results.txt", threshold=["a2s0", "a4s0", "a6s0", "a8s0", "a10s0"]),
		autosomal_variants_summary = expand(base_dir + "/call_variants/autosomal_variants/{threshold}_autosome_variants.txt", threshold=["a2s0", "a4s0", "a6s0", "a8s0", "a10s0", "a2s1", "a4s2", "a6s3", "a8s4", "a10s5"]),
		autosomal_germline_mutations_a2s0 = expand(base_dir + "/call_variants/germline_mutations/a2s0/{cell_barcode}_germline_het_mutations_autosomal.vcf.gz", cell_barcode=cell_barcodes),
		filter_germline_variants_loose_stringency = expand(base_dir + "/call_variants/filter_germline_mutation/a2s0_AF" + max_VAF_clonal_mutation + "/a2s0_filterGermline.{cell_barcode}.vcf", cell_barcode=cell_barcodes),
	shell:
		"find {base_dir} -maxdepth 1 -name 'output*.out' -delete"


rule Preprocessing:
	input:
		bam = cellranger_dir + "/atac_possorted_bam.bam",
	resources:
		runtime = 600,
		mem_mb = 2500
	output:	
		single_cell_bams = base_dir + "/bam/atac_possorted.{cell}.bam",
		sorted_bam_with_strand_tag = base_dir + "/bam_add_tag/{cell}_sorted.bam",
		sorted_bam_with_strand_tag_remove_indel_read = base_dir + "/bam_add_tag_remove_indel_read/{cell}_sorted.bam",
		read_families = base_dir + "/read_families/{cell}.families.bam",
		readfamily_region = base_dir + "/read_families/{cell}.families.bed",
		read_family_strand_barcode = base_dir + "/read_family_strand_barcode/{cell}_read_family_strand_barcode.txt",
	shell:
		"set -euo pipefail \n"

		# split_bam
		"samtools view -bhd CB:{wildcards.cell} --require-flags 2 --exclude-flags 2816 --remove-flags 1024 {input.bam} > {base_dir}/bam/atac_possorted.{wildcards.cell}.bam &&"
		"samtools index {base_dir}/bam/atac_possorted.{wildcards.cell}.bam \n"
		"samtools view -bhD BC:{strand1_bc} {base_dir}/bam/atac_possorted.{wildcards.cell}.bam > {base_dir}/bam/atac_possorted.{wildcards.cell}.strand1.bam &&"
		"samtools index {base_dir}/bam/atac_possorted.{wildcards.cell}.strand1.bam \n"
		"samtools view -bhD BC:{strand2_bc} {base_dir}/bam/atac_possorted.{wildcards.cell}.bam > {base_dir}/bam/atac_possorted.{wildcards.cell}.strand2.bam &&"
		"samtools index {base_dir}/bam/atac_possorted.{wildcards.cell}.strand2.bam\n"

		# add_strand_tag
		"{go_dir}/addBamTags -i {base_dir}/bam/atac_possorted.{wildcards.cell}.strand1.bam -tag BF:Z:GAGTTGCG -tag BR:Z:TGTTTCAC > {base_dir}/bam_add_tag/{wildcards.cell}_s1.bam \n"
		"{go_dir}/addBamTags -i {base_dir}/bam/atac_possorted.{wildcards.cell}.strand2.bam -tag BR:Z:GAGTTGCG -tag BF:Z:TGTTTCAC > {base_dir}/bam_add_tag/{wildcards.cell}_s2.bam \n"
		"samtools cat {base_dir}/bam_add_tag/{wildcards.cell}_s1.bam {base_dir}/bam_add_tag/{wildcards.cell}_s2.bam> {base_dir}/bam_add_tag/{wildcards.cell}_merge.bam \n"
		"samtools sort {base_dir}/bam_add_tag/{wildcards.cell}_merge.bam > {base_dir}/bam_add_tag/{wildcards.cell}_sorted.bam \n"
		"samtools index {base_dir}/bam_add_tag/{wildcards.cell}_sorted.bam \n"
		"rm -f {base_dir}/bam_add_tag/{wildcards.cell}_s1.bam \n"
		"rm -f {base_dir}/bam_add_tag/{wildcards.cell}_s2.bam \n"
		"rm -f {base_dir}/bam_add_tag/{wildcards.cell}_merge.bam\n"

		# remove_read_with_indel
		"samtools view -h -F 4 {output.sorted_bam_with_strand_tag} | awk '$6 !~ /[ID]/ {{print $0}}' | samtools view -b -o {output.sorted_bam_with_strand_tag_remove_indel_read} - \n"			

		# annotate_read_families
		"{go_dir}/annotateReadFamilies -bed {output.readfamily_region} -i {output.sorted_bam_with_strand_tag_remove_indel_read} -tolerance 0 -o {output.read_families} \n"
		"samtools index {output.read_families} \n"

		# strand_barcode_count
		"if [ ! -d \"{base_dir}/read_family_strand_barcode/tmp\" ]; then mkdir -p {base_dir}/read_family_strand_barcode/tmp; fi \n"
		"samtools view {output.read_families} | "
		"awk '{{for(i = NF; i >= 12; i--){{if($i ~ /^RF:/){{RF=$i}}else if($i ~ /^BC:/){{BC=$i; print(RF, BC); continue}}}}}}' | "
		"sort -T {base_dir}/read_family_strand_barcode/tmp | "
		"awk 'BEGIN{{RF_prev = \"\"; BC_prev = \"\"; count = 0}} {{if($1 == RF_prev){{if($2 != BC_prev){{count++; BC_array[count-1] = $2; BC_count_array[count-1] = 1; BC_prev = $2}}else{{BC_count_array[count-1]++}}}}else{{if(RF_prev){{printf(\"%s\\t%s\\t\", RF_prev, count); for(j=0; j<count; j++){{if(j==count-1){{printf(\"%s\\t%d\\n\", BC_array[j], BC_count_array[j])}}else{{printf(\"%s\\t%d\\t\", BC_array[j], BC_count_array[j])}}}}}}; RF_prev = $1; BC_prev = $2; delete BC_array; delete BC_count_array; BC_array[0] = $2; BC_count_array[0] = 1; count = 1}}}}' | "
		"awk 'NR==FNR{{strand[$1]; next}}{{count=0; strand1_num=0; for(i=3; i<=($2*2+2); i+=2){{for(tag in strand){{if($i ~ (\"BC:Z:\" tag)){{count+=$(i+1); strand1_num++}}}}}}printf(\"%s\\t%s\\t%d\\t%d\\n\", $0, \"strand1\", strand1_num, count)}}' {strand1_bc} - | "
		"awk 'NR==FNR{{strand[$1]; next}}{{count=0; strand2_num=0; for(i=3; i<=($2*2+2); i+=2){{for(tag in strand){{if($i ~ (\"BC:Z:\" tag)){{count+=$(i+1); strand2_num++}}}}}}printf(\"%s\\t%s\\t%d\\t%d\\n\", $0, \"strand2\", strand2_num, count)}}' {strand2_bc} - > {output.read_family_strand_barcode} \n"

rule Strand_barcode_count_summary:
	input:
		read_family_strand_barcode = expand(base_dir + "/read_family_strand_barcode/{cell_barcode}_read_family_strand_barcode.txt", cell_barcode=cell_barcodes),
	resources:
		runtime = 1000,
		mem_mb = 250
	params:
		cell_barcode_list = expand("{cell_barcode}", cell_barcode=cell_barcodes)
	output:
		read_family_strand_barcode_summary = base_dir + "/read_family_strand_barcode/read_family_strand_barcode_summary.txt",
		read_family_strand_count = expand(base_dir + "/read_family_strand_barcode/all/{cell_barcode}_read_family_strand_barcode.txt", cell_barcode=cell_barcodes),
		read_family_strand_barcode_strand2_only = expand(base_dir + "/read_family_strand_barcode/strand2_only/{cell_barcode}_read_family_strand_barcode.txt", cell_barcode=cell_barcodes),
	shell:
		"echo \"a2s0\" \"a4s0\" \"a4s1\" \"a6s0\" \"a6s1\" \"a6s2\" \"a8s0\" \"a8s1\" \"a8s2\" \"a8s3\" \"a10s0\" \"a10s1\" \"a10s2\" \"a10s3\" \"a10s4\" \"a2s1\" \"a4s2\" \"a6s3\" \"a8s4\" \"a10s5\" \"cell\" > {output.read_family_strand_barcode_summary} \n"
		"for cell in {params.cell_barcode_list}; do \n"
			"a2s0=$(awk '{{if($(NF-3)==0 && $(NF-1)>=2 && $(NF)>=4){{print $0}}}}' {base_dir}/read_family_strand_barcode/${{cell}}_read_family_strand_barcode.txt | awk 'NR==FNR{{strand[$1]; next}}{{max=0; for(i=3; i<=($2*2+2); i+=2){{for(tag in strand){{if($i ~ (\"BC:Z:\" tag)){{if($(i+1) > max){{max = $(i+1)}}}}}}}}; if($(NF) - max >= 2 && max >= 2){{print $0}}}}' {strand2_bc} - | wc -l) \n"
			"a4s0=$(awk '{{if($(NF-3)==0 && $(NF-1)>=2 && $(NF)>=8){{print $0}}}}' {base_dir}/read_family_strand_barcode/${{cell}}_read_family_strand_barcode.txt | awk 'NR==FNR{{strand[$1]; next}}{{max=0; for(i=3; i<=($2*2+2); i+=2){{for(tag in strand){{if($i ~ (\"BC:Z:\" tag)){{if($(i+1) > max){{max = $(i+1)}}}}}}}}; if($(NF) - max >= 4 && max >= 4){{print $0}}}}' {strand2_bc} - | wc -l) \n"
			"a4s1=$(awk '{{if($(NF-3)==2 && $(NF-1)>=2 && $(NF)>=6){{print $0}}}}' {base_dir}/read_family_strand_barcode/${{cell}}_read_family_strand_barcode.txt | awk 'NR==FNR{{strand[$1]; next}}{{max=0; for(i=3; i<=($2*2+2); i+=2){{for(tag in strand){{if($i ~ (\"BC:Z:\" tag)){{if($(i+1) > max){{max = $(i+1)}}}}}}}}; if($(NF) - max >= 2 && max >= 4){{print $0}}}}' {strand2_bc} - | wc -l) \n"
			"a6s0=$(awk '{{if($(NF-3)==0 && $(NF-1)>=2 && $(NF)>=12){{print $0}}}}' {base_dir}/read_family_strand_barcode/${{cell}}_read_family_strand_barcode.txt | awk 'NR==FNR{{strand[$1]; next}}{{max=0; for(i=3; i<=($2*2+2); i+=2){{for(tag in strand){{if($i ~ (\"BC:Z:\" tag)){{if($(i+1) > max){{max = $(i+1)}}}}}}}}; if($(NF) - max >= 6 && max >= 6){{print $0}}}}' {strand2_bc} - | wc -l) \n"
			"a6s1=$(awk '{{if($(NF-3)==2 && $(NF-1)>=2 && $(NF)>=10){{print $0}}}}' {base_dir}/read_family_strand_barcode/${{cell}}_read_family_strand_barcode.txt | awk 'NR==FNR{{strand[$1]; next}}{{max=0; for(i=3; i<=($2*2+2); i+=2){{for(tag in strand){{if($i ~ (\"BC:Z:\" tag)){{if($(i+1) > max){{max = $(i+1)}}}}}}}}; if($(NF) - max >= 4 && max >= 6){{print $0}}}}' {strand2_bc} - | wc -l) \n"
			"a6s2=$(awk '{{if($(NF-3)==4 && $(NF-1)>=2 && $(NF)>=8){{print $0}}}}' {base_dir}/read_family_strand_barcode/${{cell}}_read_family_strand_barcode.txt | awk 'NR==FNR{{strand[$1]; next}}{{max=0; for(i=3; i<=($2*2+2); i+=2){{for(tag in strand){{if($i ~ (\"BC:Z:\" tag)){{if($(i+1) > max){{max = $(i+1)}}}}}}}}; if($(NF) - max >= 2 && max >= 6){{print $0}}}}' {strand2_bc} - | wc -l) \n"		
			"a8s0=$(awk '{{if($(NF-3)==0 && $(NF-1)>=2 && $(NF)>=16){{print $0}}}}' {base_dir}/read_family_strand_barcode/${{cell}}_read_family_strand_barcode.txt | awk 'NR==FNR{{strand[$1]; next}}{{max=0; for(i=3; i<=($2*2+2); i+=2){{for(tag in strand){{if($i ~ (\"BC:Z:\" tag)){{if($(i+1) > max){{max = $(i+1)}}}}}}}}; if($(NF) - max >= 8 && max >= 8){{print $0}}}}' {strand2_bc} - | wc -l) \n"
			"a8s1=$(awk '{{if($(NF-3)==2 && $(NF-1)>=2 && $(NF)>=14){{print $0}}}}' {base_dir}/read_family_strand_barcode/${{cell}}_read_family_strand_barcode.txt | awk 'NR==FNR{{strand[$1]; next}}{{max=0; for(i=3; i<=($2*2+2); i+=2){{for(tag in strand){{if($i ~ (\"BC:Z:\" tag)){{if($(i+1) > max){{max = $(i+1)}}}}}}}}; if($(NF) - max >= 6 && max >= 8){{print $0}}}}' {strand2_bc} - | wc -l) \n"
			"a8s2=$(awk '{{if($(NF-3)==4 && $(NF-1)>=2 && $(NF)>=12){{print $0}}}}' {base_dir}/read_family_strand_barcode/${{cell}}_read_family_strand_barcode.txt | awk 'NR==FNR{{strand[$1]; next}}{{max=0; for(i=3; i<=($2*2+2); i+=2){{for(tag in strand){{if($i ~ (\"BC:Z:\" tag)){{if($(i+1) > max){{max = $(i+1)}}}}}}}}; if($(NF) - max >= 4 && max >= 8){{print $0}}}}' {strand2_bc} - | wc -l) \n"
			"a8s3=$(awk '{{if($(NF-3)==6 && $(NF-1)>=2 && $(NF)>=10){{print $0}}}}' {base_dir}/read_family_strand_barcode/${{cell}}_read_family_strand_barcode.txt | awk 'NR==FNR{{strand[$1]; next}}{{max=0; for(i=3; i<=($2*2+2); i+=2){{for(tag in strand){{if($i ~ (\"BC:Z:\" tag)){{if($(i+1) > max){{max = $(i+1)}}}}}}}}; if($(NF) - max >= 2 && max >= 8){{print $0}}}}' {strand2_bc} - | wc -l) \n"		
			"a10s0=$(awk '{{if($(NF-3)==0 && $(NF-1)>=2 && $(NF)>=20){{print $0}}}}' {base_dir}/read_family_strand_barcode/${{cell}}_read_family_strand_barcode.txt | awk 'NR==FNR{{strand[$1]; next}}{{max=0; for(i=3; i<=($2*2+2); i+=2){{for(tag in strand){{if($i ~ (\"BC:Z:\" tag)){{if($(i+1) > max){{max = $(i+1)}}}}}}}}; if($(NF) - max >= 10 && max >= 10){{print $0}}}}' {strand2_bc} - | wc -l) \n"
			"a10s1=$(awk '{{if($(NF-3)==2 && $(NF-1)>=2 && $(NF)>=18){{print $0}}}}' {base_dir}/read_family_strand_barcode/${{cell}}_read_family_strand_barcode.txt | awk 'NR==FNR{{strand[$1]; next}}{{max=0; for(i=3; i<=($2*2+2); i+=2){{for(tag in strand){{if($i ~ (\"BC:Z:\" tag)){{if($(i+1) > max){{max = $(i+1)}}}}}}}}; if($(NF) - max >= 8 && max >= 10){{print $0}}}}' {strand2_bc} - | wc -l) \n"
			"a10s2=$(awk '{{if($(NF-3)==4 && $(NF-1)>=2 && $(NF)>=16){{print $0}}}}' {base_dir}/read_family_strand_barcode/${{cell}}_read_family_strand_barcode.txt | awk 'NR==FNR{{strand[$1]; next}}{{max=0; for(i=3; i<=($2*2+2); i+=2){{for(tag in strand){{if($i ~ (\"BC:Z:\" tag)){{if($(i+1) > max){{max = $(i+1)}}}}}}}}; if($(NF) - max >= 6 && max >= 10){{print $0}}}}' {strand2_bc} - | wc -l) \n"
			"a10s3=$(awk '{{if($(NF-3)==6 && $(NF-1)>=2 && $(NF)>=14){{print $0}}}}' {base_dir}/read_family_strand_barcode/${{cell}}_read_family_strand_barcode.txt | awk 'NR==FNR{{strand[$1]; next}}{{max=0; for(i=3; i<=($2*2+2); i+=2){{for(tag in strand){{if($i ~ (\"BC:Z:\" tag)){{if($(i+1) > max){{max = $(i+1)}}}}}}}}; if($(NF) - max >= 4 && max >= 10){{print $0}}}}' {strand2_bc} - | wc -l) \n"
			"a10s4=$(awk '{{if($(NF-3)==8 && $(NF-1)>=2 && $(NF)>=12){{print $0}}}}' {base_dir}/read_family_strand_barcode/${{cell}}_read_family_strand_barcode.txt | awk 'NR==FNR{{strand[$1]; next}}{{max=0; for(i=3; i<=($2*2+2); i+=2){{for(tag in strand){{if($i ~ (\"BC:Z:\" tag)){{if($(i+1) > max){{max = $(i+1)}}}}}}}}; if($(NF) - max >= 2 && max >= 10){{print $0}}}}' {strand2_bc} - | wc -l) \n"	
			"correct=$(awk 'BEGIN {{s1=0;s2=0;s3=0;s4=0;s5=0}} {{if($(NF-3) >= 2 && $(NF) >= 2){{s1+=1}}; if($(NF-3) >= 4 && $(NF) >= 4){{s2+=1}}; if($(NF-3) >= 6 && $(NF) >= 6){{s3+=1}}; if($(NF-3) >= 8 && $(NF) >= 8){{s4+=1}}; if($(NF-3) >= 10 && $(NF) >= 10){{s5+=1}}}} END {{print s1, s2, s3, s4, s5}}' {base_dir}/read_family_strand_barcode/${{cell}}_read_family_strand_barcode.txt) \n"
			"echo $a2s0 $a4s0 $a4s1 $a6s0 $a6s1 $a6s2 $a8s0 $a8s1 $a8s2 $a8s3 $a10s0 $a10s1 $a10s2 $a10s3 $a10s4 $correct $cell >> {output.read_family_strand_barcode_summary} \n"
		"done \n"
		"for cell in {params.cell_barcode_list}; do awk -v cell=\"$cell\" '{{print $1, $2, $(NF-5), $(NF-4), $(NF-3), $(NF-2), $(NF-1), $NF}}' {base_dir}/read_family_strand_barcode/${{cell}}_read_family_strand_barcode.txt > {base_dir}/read_family_strand_barcode/all/${{cell}}_read_family_strand_barcode.txt; done \n"
		"for cell in {params.cell_barcode_list}; do awk -v cell=\"$cell\" '{{if($(NF-1) > 0 && $(NF-4) == 0){{print $1, $2, $(NF-5), $(NF-4), $(NF-3), $(NF-2), $(NF-1), $NF}}}}' {base_dir}/read_family_strand_barcode/${{cell}}_read_family_strand_barcode.txt > {base_dir}/read_family_strand_barcode/strand2_only/${{cell}}_read_family_strand_barcode.txt; done \n"

rule Call_variants:
	input:
		read_families = base_dir + "/read_families/{cell}.families.bam",
		readfamily_region = base_dir + "/read_families/{cell}.families.bed",
	resources:
		runtime = 60,
		mem_mb = 16000,
		tasks = 4
	wildcard_constraints:
		cell = "[ATCG]*-1"
	output:
		called_variants_a2s1 = base_dir + "/call_variants/Dan/a2s1/{cell}.vcf",
		callable_region_a2s1 = base_dir + "/read_families/a2s1/{cell}.families.analysis.calledSites.bed",
		analysis_region_a2s1 = base_dir + "/read_families/a2s1/{cell}.families.analysis.bed",
		called_variants_a2s0 = base_dir + "/call_variants/Dan/a2s0/{cell}.vcf",
		callable_region_a2s0 = base_dir + "/read_families/a2s0/{cell}.families.analysis.calledSites.bed",
		analysis_region_a2s0 = base_dir + "/read_families/a2s0/{cell}.families.analysis.bed",
	shell:
		"set -euo pipefail \n"
		"{go_dir}/mcsCallVariants -r {reference_genome} -i {input.read_families} -o {output.called_variants_a2s1} -b {input.readfamily_region} -e {masked_region} -a 2 -s 1 -threads {resources.tasks} -ignoreEnds 20 -minAF 1 -memprofile {base_dir}/call_variants/Dan/mem.{sample_name} \n"
		"mv {base_dir}/read_families/{wildcards.cell}.families.analysis.calledSites.bed {output.callable_region_a2s1} \n"
		"mv {base_dir}/read_families/{wildcards.cell}.families.analysis.bed {output.analysis_region_a2s1} \n"
		"wait \n"
		"{go_dir}/mcsCallVariants -r {reference_genome} -i {input.read_families} -o {output.called_variants_a2s0} -b {input.readfamily_region} -e {masked_region} -a 2 -s 0 -threads {resources.tasks} -ignoreEnds 20 -minAF 1 -memprofile {base_dir}/call_variants/Dan/mem.{sample_name} \n"
		"mv {base_dir}/read_families/{wildcards.cell}.families.analysis.calledSites.bed {output.callable_region_a2s0} \n"
		"mv {base_dir}/read_families/{wildcards.cell}.families.analysis.bed {output.analysis_region_a2s0} \n"

rule Filtering:
	input:
		called_variants_a2s1 = base_dir + "/call_variants/Dan/a2s1/{cell}.vcf",
		callable_region_a2s1 = base_dir + "/read_families/a2s1/{cell}.families.analysis.calledSites.bed",
	resources:
		runtime = 1200,
		mem_mb = 32000,
	output:
		Dan_filterGermline_called_variants = base_dir + "/call_variants/filter_germline_mutation/a2s1/{cell}.Dan_filterGermline.vcf",
		filter_germline_called_variants = base_dir + "/call_variants/filter_germline_mutation/a2s1/{cell}.include_knownsnp.vcf",
		filter_germline_knownsnp_called_variants_a2s1 = base_dir + "/call_variants/filter_germline_mutation/a2s1/a2s1_filterGermline.{cell}.vcf",
		
		filter_germline_knownsnp_called_variants_a4s2 = base_dir + "/call_variants/filter_germline_mutation/a4s2/a4s2_filterGermline.{cell}.vcf",
		filter_germline_knownsnp_called_variants_a6s3 = base_dir + "/call_variants/filter_germline_mutation/a6s3/a6s3_filterGermline.{cell}.vcf",
		filter_germline_knownsnp_called_variants_a8s4 = base_dir + "/call_variants/filter_germline_mutation/a8s4/a8s4_filterGermline.{cell}.vcf",
		filter_germline_knownsnp_called_variants_a10s5 = base_dir + "/call_variants/filter_germline_mutation/a10s5/a10s5_filterGermline.{cell}.vcf",
		
		callable_region_a4s2 = base_dir + "/read_families/a4s2/{cell}.families.analysis.calledSites.bed",
		callable_region_a6s3 = base_dir + "/read_families/a6s3/{cell}.families.analysis.calledSites.bed",
		callable_region_a8s4 = base_dir + "/read_families/a8s4/{cell}.families.analysis.calledSites.bed",
		callable_region_a10s5 = base_dir + "/read_families/a10s5/{cell}.families.analysis.calledSites.bed",

		autosomal_variants_a2s1 = base_dir + "/call_variants/autosomal_variants/a2s1/a2s1_filterGermline_autosomal_variants.{cell}.vcf",
		autosomal_variants_a4s2 = base_dir + "/call_variants/autosomal_variants/a4s2/a4s2_filterGermline_autosomal_variants.{cell}.vcf",
		autosomal_variants_a6s3 = base_dir + "/call_variants/autosomal_variants/a6s3/a6s3_filterGermline_autosomal_variants.{cell}.vcf",
		autosomal_variants_a8s4 = base_dir + "/call_variants/autosomal_variants/a8s4/a8s4_filterGermline_autosomal_variants.{cell}.vcf",
		autosomal_variants_a10s5 = base_dir + "/call_variants/autosomal_variants/a10s5/a10s5_filterGermline_autosomal_variants.{cell}.vcf",

		autosomal_callable_region_a2s1 = base_dir + "/call_variants/autosomal_callable_region/a2s1/{cell}.families.analysis.calledSites.bed",
		autosomal_callable_region_a4s2 = base_dir + "/call_variants/autosomal_callable_region/a4s2/{cell}.families.analysis.calledSites.bed",
		autosomal_callable_region_a6s3 = base_dir + "/call_variants/autosomal_callable_region/a6s3/{cell}.families.analysis.calledSites.bed",
		autosomal_callable_region_a8s4 = base_dir + "/call_variants/autosomal_callable_region/a8s4/{cell}.families.analysis.calledSites.bed",
		autosomal_callable_region_a10s5 = base_dir + "/call_variants/autosomal_callable_region/a10s5/{cell}.families.analysis.calledSites.bed",

		burden_a2s1 = base_dir + "/burden_estimation/Dan/a2s1/a2s1_filterGermline_burden.{cell}.txt",
		burden_a4s2 = base_dir + "/burden_estimation/Dan/a4s2/a4s2_filterGermline_burden.{cell}.txt",
		burden_a6s3 = base_dir + "/burden_estimation/Dan/a6s3/a6s3_filterGermline_burden.{cell}.txt",
		burden_a8s4 = base_dir + "/burden_estimation/Dan/a8s4/a8s4_filterGermline_burden.{cell}.txt",
		burden_a10s5 = base_dir + "/burden_estimation/Dan/a10s5/a10s5_filterGermline_burden.{cell}.txt",
	shell:
		"set +euo pipefail \n"

		# filter germline mutation and commom SNPs
		"grep \"^#\" {input.called_variants_a2s1} > {base_dir}/call_variants/filter_germline_mutation/header.{wildcards.cell} \n"
		"{go_dir}/filterGermline -maxReads 0 -g {base_dir}/call_variants/filter_germline_mutation/header.{wildcards.cell} -i {input.called_variants_a2s1} -b {bulk_bam} -e {known_snp} > {output.Dan_filterGermline_called_variants} \n"
		"grep -v \"^#\" {output.Dan_filterGermline_called_variants} | sed \"s/:/\\t/g\" | sort -k 18 | uniq -c -f 17 | awk '{{if ($1==1) print $2\"\\t\"$3\"\\t\"$4\"\\t\"$5\"\\t\"$6\"\\t\"$7\"\\t\"$8\"\\t\"$9\"\\t\"$10\":\"$11\":\"$12\":\"$13\":\"$14\"\\t\"$15\":\"$16\":\"$17\":\"$18\":\"$19}}' | cat {base_dir}/call_variants/filter_germline_mutation/header.{wildcards.cell} - | bcftools view -v snps -Ov - | bcftools sort -Ov - -o {output.filter_germline_called_variants} \n"
		# "rm -f {base_dir}/call_variants/filter_germline_mutation/header.{wildcards.cell} \n"
		"bcftools view -h {output.filter_germline_called_variants} > {output.filter_germline_knownsnp_called_variants_a2s1} \n"

		# filter potential human DNA contamination
		"while IFS=$'\\t' read -r chr pos id ref alt other; do \n"
		"if [[ $chr == \\#* ]]; then continue; fi \n"
		"found=$(samtools mpileup -b {bulk_bam_list} -r $(echo \"$chr:$pos-$pos\") | awk  -v alt=\"$alt\" '{{found=0; for (i=5; i<=NF; i+=3) {{if (toupper($i) ~ alt) {{found=1; break;}}}}; print found; exit}}') \n"
		"if [[ $found -eq 0 ]]; then echo -e \"$chr\\t$pos\\t$id\\t$ref\\t$alt\\t$other\" >> {output.filter_germline_knownsnp_called_variants_a2s1}; fi \n"
		"done < {output.filter_germline_called_variants}\n"

		# stringency (variants)
		"bcftools filter -i 'PS >= 2 && MS >= 2' {output.filter_germline_knownsnp_called_variants_a2s1} > {output.filter_germline_knownsnp_called_variants_a4s2} \n"
		"bcftools filter -i 'PS >= 3 && MS >= 3' {output.filter_germline_knownsnp_called_variants_a2s1} > {output.filter_germline_knownsnp_called_variants_a6s3} \n"
		"bcftools filter -i 'PS >= 4 && MS >= 4' {output.filter_germline_knownsnp_called_variants_a2s1} > {output.filter_germline_knownsnp_called_variants_a8s4} \n"
		"bcftools filter -i 'PS >= 5 && MS >= 5' {output.filter_germline_knownsnp_called_variants_a2s1} > {output.filter_germline_knownsnp_called_variants_a10s5} \n"

		# stringency (covered regions)
		"awk '{{if ($7>=4 && $8>=4) print}}' {input.callable_region_a2s1} > {output.callable_region_a4s2} \n"
		"awk '{{if ($7>=6 && $8>=6) print}}' {input.callable_region_a2s1} > {output.callable_region_a6s3} \n"
		"awk '{{if ($7>=8 && $8>=8) print}}' {input.callable_region_a2s1} > {output.callable_region_a8s4} \n"
		"awk '{{if ($7>=10 && $8>=10) print}}' {input.callable_region_a2s1} > {output.callable_region_a10s5} \n"

		# autosomal variants
		"(bcftools sort -Oz {output.filter_germline_knownsnp_called_variants_a2s1} -o {base_dir}/call_variants/autosomal_variants/a2s1/a2s1_filterGermline.{wildcards.cell}.vcf.gz) && (tabix {base_dir}/call_variants/autosomal_variants/a2s1/a2s1_filterGermline.{wildcards.cell}.vcf.gz) \n"
		"(bcftools sort -Oz {output.filter_germline_knownsnp_called_variants_a4s2} -o {base_dir}/call_variants/autosomal_variants/a4s2/a4s2_filterGermline.{wildcards.cell}.vcf.gz) && (tabix {base_dir}/call_variants/autosomal_variants/a4s2/a4s2_filterGermline.{wildcards.cell}.vcf.gz) \n"
		"(bcftools sort -Oz {output.filter_germline_knownsnp_called_variants_a6s3} -o {base_dir}/call_variants/autosomal_variants/a6s3/a6s3_filterGermline.{wildcards.cell}.vcf.gz) && (tabix {base_dir}/call_variants/autosomal_variants/a6s3/a6s3_filterGermline.{wildcards.cell}.vcf.gz) \n"
		"(bcftools sort -Oz {output.filter_germline_knownsnp_called_variants_a8s4} -o {base_dir}/call_variants/autosomal_variants/a8s4/a8s4_filterGermline.{wildcards.cell}.vcf.gz) && (tabix {base_dir}/call_variants/autosomal_variants/a8s4/a8s4_filterGermline.{wildcards.cell}.vcf.gz) \n"
		"(bcftools sort -Oz {output.filter_germline_knownsnp_called_variants_a10s5} -o {base_dir}/call_variants/autosomal_variants/a10s5/a10s5_filterGermline.{wildcards.cell}.vcf.gz) && (tabix {base_dir}/call_variants/autosomal_variants/a10s5/a10s5_filterGermline.{wildcards.cell}.vcf.gz) \n"		
		"bcftools view -R /lab-share/Gene-Lee-e2/Public/home/shulin/Duplex_multiome/temp/hg38_autosomes.bed -o {output.autosomal_variants_a2s1} {base_dir}/call_variants/autosomal_variants/a2s1/a2s1_filterGermline.{wildcards.cell}.vcf.gz \n"
		"bcftools view -R /lab-share/Gene-Lee-e2/Public/home/shulin/Duplex_multiome/temp/hg38_autosomes.bed -o {output.autosomal_variants_a4s2} {base_dir}/call_variants/autosomal_variants/a4s2/a4s2_filterGermline.{wildcards.cell}.vcf.gz \n"
		"bcftools view -R /lab-share/Gene-Lee-e2/Public/home/shulin/Duplex_multiome/temp/hg38_autosomes.bed -o {output.autosomal_variants_a6s3} {base_dir}/call_variants/autosomal_variants/a6s3/a6s3_filterGermline.{wildcards.cell}.vcf.gz \n"
		"bcftools view -R /lab-share/Gene-Lee-e2/Public/home/shulin/Duplex_multiome/temp/hg38_autosomes.bed -o {output.autosomal_variants_a8s4} {base_dir}/call_variants/autosomal_variants/a8s4/a8s4_filterGermline.{wildcards.cell}.vcf.gz \n"
		"bcftools view -R /lab-share/Gene-Lee-e2/Public/home/shulin/Duplex_multiome/temp/hg38_autosomes.bed -o {output.autosomal_variants_a10s5} {base_dir}/call_variants/autosomal_variants/a10s5/a10s5_filterGermline.{wildcards.cell}.vcf.gz \n"
		"rm -f {base_dir}/call_variants/autosomal_variants/a2s1/a2s1_filterGermline.{wildcards.cell}.vcf.gz* \n"
		"rm -f {base_dir}/call_variants/autosomal_variants/a4s2/a4s2_filterGermline.{wildcards.cell}.vcf.gz* \n"
		"rm -f {base_dir}/call_variants/autosomal_variants/a6s3/a6s3_filterGermline.{wildcards.cell}.vcf.gz* \n"
		"rm -f {base_dir}/call_variants/autosomal_variants/a8s4/a8s4_filterGermline.{wildcards.cell}.vcf.gz* \n"
		"rm -f {base_dir}/call_variants/autosomal_variants/a10s5/a10s5_filterGermline.{wildcards.cell}.vcf.gz* \n"

		# autosomal covered regions
		"awk '$1 ~ /^chr[0-9]+$/ || $1 ~ /^chr[0-9][0-9]+$/ {{print}}' {input.callable_region_a2s1} > {output.autosomal_callable_region_a2s1} \n"
		"awk '$1 ~ /^chr[0-9]+$/ || $1 ~ /^chr[0-9][0-9]+$/ {{print}}' {output.callable_region_a4s2} > {output.autosomal_callable_region_a4s2} \n"
		"awk '$1 ~ /^chr[0-9]+$/ || $1 ~ /^chr[0-9][0-9]+$/ {{print}}' {output.callable_region_a6s3} > {output.autosomal_callable_region_a6s3} \n"
		"awk '$1 ~ /^chr[0-9]+$/ || $1 ~ /^chr[0-9][0-9]+$/ {{print}}' {output.callable_region_a8s4} > {output.autosomal_callable_region_a8s4} \n"
		"awk '$1 ~ /^chr[0-9]+$/ || $1 ~ /^chr[0-9][0-9]+$/ {{print}}' {output.callable_region_a10s5} > {output.autosomal_callable_region_a10s5} \n"

		# summarize results
		"{go_dir}/mcsBurdenCorrection -i {output.autosomal_variants_a2s1} -b {output.autosomal_callable_region_a2s1} -bTrim 0 -r {reference_genome} -genomeCacheInput /lab-share/Gene-Lee-e2/Public/home/shulin/Duplex_multiome/temp/Dan_genome_cache_hg38 > {output.burden_a2s1} \n"
		"{go_dir}/mcsBurdenCorrection -i {output.autosomal_variants_a4s2} -b {output.autosomal_callable_region_a4s2} -bTrim 0 -r {reference_genome} -genomeCacheInput /lab-share/Gene-Lee-e2/Public/home/shulin/Duplex_multiome/temp/Dan_genome_cache_hg38 > {output.burden_a4s2} \n"
		"{go_dir}/mcsBurdenCorrection -i {output.autosomal_variants_a6s3} -b {output.autosomal_callable_region_a6s3} -bTrim 0 -r {reference_genome} -genomeCacheInput /lab-share/Gene-Lee-e2/Public/home/shulin/Duplex_multiome/temp/Dan_genome_cache_hg38 > {output.burden_a6s3} \n"
		"{go_dir}/mcsBurdenCorrection -i {output.autosomal_variants_a8s4} -b {output.autosomal_callable_region_a8s4} -bTrim 0 -r {reference_genome} -genomeCacheInput /lab-share/Gene-Lee-e2/Public/home/shulin/Duplex_multiome/temp/Dan_genome_cache_hg38 > {output.burden_a8s4} \n"
		"{go_dir}/mcsBurdenCorrection -i {output.autosomal_variants_a10s5} -b {output.autosomal_callable_region_a10s5} -bTrim 0 -r {reference_genome} -genomeCacheInput /lab-share/Gene-Lee-e2/Public/home/shulin/Duplex_multiome/temp/Dan_genome_cache_hg38 > {output.burden_a10s5} \n"	

rule Collect_Dan_burden_estimation:
	input:
		burden_a2s1 = expand(base_dir + "/burden_estimation/Dan/{threshold}/{threshold}_filterGermline_burden.{cell_barcode}.txt", cell_barcode=cell_barcodes, threshold="a2s1"),
		burden_a4s2 = expand(base_dir + "/burden_estimation/Dan/{threshold}/{threshold}_filterGermline_burden.{cell_barcode}.txt", cell_barcode=cell_barcodes, threshold="a4s2"),
		burden_a6s3 = expand(base_dir + "/burden_estimation/Dan/{threshold}/{threshold}_filterGermline_burden.{cell_barcode}.txt", cell_barcode=cell_barcodes, threshold="a6s3"),
		burden_a8s4 = expand(base_dir + "/burden_estimation/Dan/{threshold}/{threshold}_filterGermline_burden.{cell_barcode}.txt", cell_barcode=cell_barcodes, threshold="a8s4"),
		burden_a10s5 = expand(base_dir + "/burden_estimation/Dan/{threshold}/{threshold}_filterGermline_burden.{cell_barcode}.txt", cell_barcode=cell_barcodes, threshold="a10s5")
	resources:
		runtime = 120,
		mem_mb = 500
	output:
		burden = expand(base_dir + "/burden_estimation/Dan/{threshold}_burden_results.txt", threshold=["a2s1", "a4s2", "a6s3", "a8s4", "a10s5"])
	shell:
		"for file in {base_dir}/burden_estimation/Dan/a2s1/a2s1_filterGermline_burden.*.txt; do echo -e \"$(head -n 4 $file | grep -oP '.*:\\t\\K[^\\n]*' | paste -s -d '\\t')\\t$file\" >> {base_dir}/burden_estimation/Dan/a2s1_burden_results.txt; done \n"
		"for file in {base_dir}/burden_estimation/Dan/a4s2/a4s2_filterGermline_burden.*.txt; do echo -e \"$(head -n 4 $file | grep -oP '.*:\\t\\K[^\\n]*' | paste -s -d '\\t')\\t$file\" >> {base_dir}/burden_estimation/Dan/a4s2_burden_results.txt; done \n"
		"for file in {base_dir}/burden_estimation/Dan/a6s3/a6s3_filterGermline_burden.*.txt; do echo -e \"$(head -n 4 $file | grep -oP '.*:\\t\\K[^\\n]*' | paste -s -d '\\t')\\t$file\" >> {base_dir}/burden_estimation/Dan/a6s3_burden_results.txt; done \n"
		"for file in {base_dir}/burden_estimation/Dan/a8s4/a8s4_filterGermline_burden.*.txt; do echo -e \"$(head -n 4 $file | grep -oP '.*:\\t\\K[^\\n]*' | paste -s -d '\\t')\\t$file\" >> {base_dir}/burden_estimation/Dan/a8s4_burden_results.txt; done \n"
		"for file in {base_dir}/burden_estimation/Dan/a10s5/a10s5_filterGermline_burden.*.txt; do echo -e \"$(head -n 4 $file | grep -oP '.*:\\t\\K[^\\n]*' | paste -s -d '\\t')\\t$file\" >> {base_dir}/burden_estimation/Dan/a10s5_burden_results.txt; done \n"

rule Germline_sensitivity:
	input:
		called_variants = base_dir + "/call_variants/Dan/a2s1/" + "{cell}.vcf",
		het_germline_mutations = het_germline_mutations,

		autosomal_callable_region_a2s1 = base_dir + "/call_variants/autosomal_callable_region/a2s1/{cell}.families.analysis.calledSites.bed",
		autosomal_callable_region_a4s2 = base_dir + "/call_variants/autosomal_callable_region/a4s2/{cell}.families.analysis.calledSites.bed",
		autosomal_callable_region_a6s3 = base_dir + "/call_variants/autosomal_callable_region/a6s3/{cell}.families.analysis.calledSites.bed",
		autosomal_callable_region_a8s4 = base_dir + "/call_variants/autosomal_callable_region/a8s4/{cell}.families.analysis.calledSites.bed",
		autosomal_callable_region_a10s5 = base_dir + "/call_variants/autosomal_callable_region/a10s5/{cell}.families.analysis.calledSites.bed",
	resources:
		runtime = 60,
		mem_mb = 500
	output:
		germline_mutations_a2s1 = base_dir + "/call_variants/germline_mutations/all_germline_het_mutations_a2s1/{cell}_germline_het_mutations.vcf.gz",
		autosomal_germline_mutations_a2s1 = base_dir + "/call_variants/germline_mutations/a2s1/{cell}_germline_het_mutations_autosomal.vcf.gz",
		autosomal_germline_mutations_a4s2 = base_dir + "/call_variants/germline_mutations/a4s2/{cell}_germline_het_mutations_autosomal.vcf.gz",
		autosomal_germline_mutations_a6s3 = base_dir + "/call_variants/germline_mutations/a6s3/{cell}_germline_het_mutations_autosomal.vcf.gz",
		autosomal_germline_mutations_a8s4 = base_dir + "/call_variants/germline_mutations/a8s4/{cell}_germline_het_mutations_autosomal.vcf.gz",
		autosomal_germline_mutations_a10s5 = base_dir + "/call_variants/germline_mutations/a10s5/{cell}_germline_het_mutations_autosomal.vcf.gz",
		
		all_het_germline_mutations_callable_region_a2s1 = base_dir + "/call_variants/all_germline_mutations_callable_region/a2s1/{cell}_germline_mutations_callable_region.vcf",
		all_het_germline_mutations_callable_region_a4s2 = base_dir + "/call_variants/all_germline_mutations_callable_region/a4s2/{cell}_germline_mutations_callable_region.vcf",
		all_het_germline_mutations_callable_region_a6s3 = base_dir + "/call_variants/all_germline_mutations_callable_region/a6s3/{cell}_germline_mutations_callable_region.vcf",
		all_het_germline_mutations_callable_region_a8s4 = base_dir + "/call_variants/all_germline_mutations_callable_region/a8s4/{cell}_germline_mutations_callable_region.vcf",
		all_het_germline_mutations_callable_region_a10s5 = base_dir + "/call_variants/all_germline_mutations_callable_region/a10s5/{cell}_germline_mutations_callable_region.vcf",
	shell:
		"set -euo pipefail \n"

		# get_germline_mutations
		"(bcftools sort -Oz {input.called_variants} -o {base_dir}/call_variants/Dan/a2s1/{wildcards.cell}.vcf.gz) && (tabix {base_dir}/call_variants/Dan/a2s1/{wildcards.cell}.vcf.gz) \n"
		"bcftools isec {base_dir}/call_variants/Dan/a2s1/{wildcards.cell}.vcf.gz {input.het_germline_mutations} -n =2 -w 1 -O z -o {output.germline_mutations_a2s1} \n"
		"tabix {output.germline_mutations_a2s1} \n"
		"bcftools view -R {autosomes_bed} {output.germline_mutations_a2s1} -o {output.autosomal_germline_mutations_a2s1} \n"
		"bcftools filter -i 'PS >= 2 && MS >= 2' {output.autosomal_germline_mutations_a2s1} > {output.autosomal_germline_mutations_a4s2} \n"
		"bcftools filter -i 'PS >= 3 && MS >= 3' {output.autosomal_germline_mutations_a2s1} > {output.autosomal_germline_mutations_a6s3} \n"
		"bcftools filter -i 'PS >= 4 && MS >= 4' {output.autosomal_germline_mutations_a2s1} > {output.autosomal_germline_mutations_a8s4} \n"
		"bcftools filter -i 'PS >= 5 && MS >= 5' {output.autosomal_germline_mutations_a2s1} > {output.autosomal_germline_mutations_a10s5} \n"

		# germline_mutations_callable_region
		"if [ \"$(wc -l < \"{input.autosomal_callable_region_a2s1}\")\" -eq 0 ]; then bcftools view -h {input.het_germline_mutations} -Ov -o {output.all_het_germline_mutations_callable_region_a2s1}; else bcftools view -R {input.autosomal_callable_region_a2s1} {input.het_germline_mutations} -Ov -o {output.all_het_germline_mutations_callable_region_a2s1}; fi\n"
		"if [ \"$(wc -l < \"{input.autosomal_callable_region_a4s2}\")\" -eq 0 ]; then bcftools view -h {input.het_germline_mutations} -Ov -o {output.all_het_germline_mutations_callable_region_a4s2}; else bcftools view -R {input.autosomal_callable_region_a4s2} {input.het_germline_mutations} -Ov -o {output.all_het_germline_mutations_callable_region_a4s2}; fi\n"
		"if [ \"$(wc -l < \"{input.autosomal_callable_region_a6s3}\")\" -eq 0 ]; then bcftools view -h {input.het_germline_mutations} -Ov -o {output.all_het_germline_mutations_callable_region_a6s3}; else bcftools view -R {input.autosomal_callable_region_a6s3} {input.het_germline_mutations} -Ov -o {output.all_het_germline_mutations_callable_region_a6s3}; fi\n"
		"if [ \"$(wc -l < \"{input.autosomal_callable_region_a8s4}\")\" -eq 0 ]; then bcftools view -h {input.het_germline_mutations} -Ov -o {output.all_het_germline_mutations_callable_region_a8s4}; else bcftools view -R {input.autosomal_callable_region_a8s4} {input.het_germline_mutations} -Ov -o {output.all_het_germline_mutations_callable_region_a8s4}; fi\n"
		"if [ \"$(wc -l < \"{input.autosomal_callable_region_a10s5}\")\" -eq 0 ]; then bcftools view -h {input.het_germline_mutations} -Ov -o {output.all_het_germline_mutations_callable_region_a10s5}; else bcftools view -R {input.autosomal_callable_region_a10s5} {input.het_germline_mutations} -Ov -o {output.all_het_germline_mutations_callable_region_a10s5}; fi\n"

rule Count_germline_mutations:
	input:
		autosomal_germline_mutations_a2s1 = expand(base_dir + "/call_variants/germline_mutations/{threshold}/{cell_barcode}_germline_het_mutations_autosomal.vcf.gz", cell_barcode=cell_barcodes, threshold="a2s1"),
		autosomal_germline_mutations_a4s2 = expand(base_dir + "/call_variants/germline_mutations/{threshold}/{cell_barcode}_germline_het_mutations_autosomal.vcf.gz", cell_barcode=cell_barcodes, threshold="a4s2"),
		autosomal_germline_mutations_a6s3 = expand(base_dir + "/call_variants/germline_mutations/{threshold}/{cell_barcode}_germline_het_mutations_autosomal.vcf.gz", cell_barcode=cell_barcodes, threshold="a6s3"),
		autosomal_germline_mutations_a8s4 = expand(base_dir + "/call_variants/germline_mutations/{threshold}/{cell_barcode}_germline_het_mutations_autosomal.vcf.gz", cell_barcode=cell_barcodes, threshold="a8s4"),
		autosomal_germline_mutations_a10s5 = expand(base_dir + "/call_variants/germline_mutations/{threshold}/{cell_barcode}_germline_het_mutations_autosomal.vcf.gz", cell_barcode=cell_barcodes, threshold="a10s5"),
	resources:
		runtime = 5000,
		mem_mb = 2000
	output:
		autosomal_germline_mutations_summary = expand(base_dir + "/call_variants/germline_mutations/{threshold}_germline_mutation_results.txt", threshold=["a2s1", "a4s2", "a6s3", "a8s4", "a10s5"])
	shell:
		"set -euo pipefail \n"
		"for file in {input.autosomal_germline_mutations_a2s1}; do echo -e \"$(bcftools view $file | grep -v \"^#\" | wc -l)\\t$file\" >> {base_dir}/call_variants/germline_mutations/a2s1_germline_mutation_results.txt; done &\n"
		"for file in {input.autosomal_germline_mutations_a4s2}; do echo -e \"$(bcftools view $file | grep -v \"^#\" | wc -l)\\t$file\" >> {base_dir}/call_variants/germline_mutations/a4s2_germline_mutation_results.txt; done &\n"
		"for file in {input.autosomal_germline_mutations_a6s3}; do echo -e \"$(bcftools view $file | grep -v \"^#\" | wc -l)\\t$file\" >> {base_dir}/call_variants/germline_mutations/a6s3_germline_mutation_results.txt; done &\n"
		"for file in {input.autosomal_germline_mutations_a8s4}; do echo -e \"$(bcftools view $file | grep -v \"^#\" | wc -l)\\t$file\" >> {base_dir}/call_variants/germline_mutations/a8s4_germline_mutation_results.txt; done &\n"
		"for file in {input.autosomal_germline_mutations_a10s5}; do echo -e \"$(bcftools view $file | grep -v \"^#\" | wc -l)\\t$file\" >> {base_dir}/call_variants/germline_mutations/a10s5_germline_mutation_results.txt; done &\n"
		"wait \n"

rule Detection_efficiency:
	input:
		all_het_germline_mutations_callable_region_a2s1 = expand(base_dir + "/call_variants/all_germline_mutations_callable_region/a2s1/{cell_barcode}_germline_mutations_callable_region.vcf", cell_barcode=cell_barcodes),
		all_het_germline_mutations_callable_region_a4s2 = expand(base_dir + "/call_variants/all_germline_mutations_callable_region/a4s2/{cell_barcode}_germline_mutations_callable_region.vcf", cell_barcode=cell_barcodes),
		all_het_germline_mutations_callable_region_a6s3 = expand(base_dir + "/call_variants/all_germline_mutations_callable_region/a6s3/{cell_barcode}_germline_mutations_callable_region.vcf", cell_barcode=cell_barcodes),
		all_het_germline_mutations_callable_region_a8s4 = expand(base_dir + "/call_variants/all_germline_mutations_callable_region/a8s4/{cell_barcode}_germline_mutations_callable_region.vcf", cell_barcode=cell_barcodes),
		all_het_germline_mutations_callable_region_a10s5 = expand(base_dir + "/call_variants/all_germline_mutations_callable_region/a10s5/{cell_barcode}_germline_mutations_callable_region.vcf", cell_barcode=cell_barcodes),
	resources:
		runtime = 500,
		mem_mb = 4000
	output:
		all_het_germline_mutations_callable_region_summary_a2s1 = base_dir + "/call_variants/all_germline_mutations_callable_region/all_germline_mutations_callable_region_summary_a2s1.txt",
		all_het_germline_mutations_callable_region_summary_a4s2 = base_dir + "/call_variants/all_germline_mutations_callable_region/all_germline_mutations_callable_region_summary_a4s2.txt",
		all_het_germline_mutations_callable_region_summary_a6s3 = base_dir + "/call_variants/all_germline_mutations_callable_region/all_germline_mutations_callable_region_summary_a6s3.txt",
		all_het_germline_mutations_callable_region_summary_a8s4 = base_dir + "/call_variants/all_germline_mutations_callable_region/all_germline_mutations_callable_region_summary_a8s4.txt",
		all_het_germline_mutations_callable_region_summary_a10s5 = base_dir + "/call_variants/all_germline_mutations_callable_region/all_germline_mutations_callable_region_summary_a10s5.txt",
	shell:
		"set -euo pipefail \n"
		"for file in {input.all_het_germline_mutations_callable_region_a2s1}; do echo -e \"$(grep -v \"^#\" $file | wc -l)\\t$file\" >> {output.all_het_germline_mutations_callable_region_summary_a2s1}; done \n"
		"for file in {input.all_het_germline_mutations_callable_region_a4s2}; do echo -e \"$(grep -v \"^#\" $file | wc -l)\\t$file\" >> {output.all_het_germline_mutations_callable_region_summary_a4s2}; done \n"
		"for file in {input.all_het_germline_mutations_callable_region_a6s3}; do echo -e \"$(grep -v \"^#\" $file | wc -l)\\t$file\" >> {output.all_het_germline_mutations_callable_region_summary_a6s3}; done \n"
		"for file in {input.all_het_germline_mutations_callable_region_a8s4}; do echo -e \"$(grep -v \"^#\" $file | wc -l)\\t$file\" >> {output.all_het_germline_mutations_callable_region_summary_a8s4}; done \n"
		"for file in {input.all_het_germline_mutations_callable_region_a10s5}; do echo -e \"$(grep -v \"^#\" $file | wc -l)\\t$file\" >> {output.all_het_germline_mutations_callable_region_summary_a10s5}; done \n"

rule Filtering_withoutDuplexConsensus:
	input:
		called_variants_a2s0 = base_dir + "/call_variants/Dan/a2s0/{cell}.vcf",
		callable_region_a2s0 = base_dir + "/read_families/a2s0/{cell}.families.analysis.calledSites.bed",
		het_germline_mutations = het_germline_mutations,
	resources:
		runtime = 1200,
		mem_mb = 32000,
	output:
		Dan_filterGermline_called_variants = base_dir + "/call_variants/filter_germline_mutation/a2s0/Dan_filterGermline.{cell}.vcf",
		filter_germline_called_variants = base_dir + "/call_variants/filter_germline_mutation/a2s0/include_knownsnp.{cell}.vcf",
		filter_germline_knownsnp_called_variants_a2s0 = base_dir + "/call_variants/filter_germline_mutation/a2s0/a2s0_filterGermline.{cell}.vcf",
	
		filter_germline_knownsnp_called_variants_a4s0 = base_dir + "/call_variants/filter_germline_mutation/a4s0/a4s0_filterGermline.{cell}.vcf",
		filter_germline_knownsnp_called_variants_a6s0 = base_dir + "/call_variants/filter_germline_mutation/a6s0/a6s0_filterGermline.{cell}.vcf",
		filter_germline_knownsnp_called_variants_a8s0 = base_dir + "/call_variants/filter_germline_mutation/a8s0/a8s0_filterGermline.{cell}.vcf",
		filter_germline_knownsnp_called_variants_a10s0 = base_dir + "/call_variants/filter_germline_mutation/a10s0/a10s0_filterGermline.{cell}.vcf",

		callable_region_a4s0 = base_dir + "/read_families/a4s0/{cell}.families.analysis.calledSites.bed",
		callable_region_a6s0 = base_dir + "/read_families/a6s0/{cell}.families.analysis.calledSites.bed",
		callable_region_a8s0 = base_dir + "/read_families/a8s0/{cell}.families.analysis.calledSites.bed",
		callable_region_a10s0 = base_dir + "/read_families/a10s0/{cell}.families.analysis.calledSites.bed",
		
		autosomal_variants_a2s0 = base_dir + "/call_variants/autosomal_variants/a2s0/a2s0_filterGermline_autosomal_variants.{cell}.vcf",
		autosomal_variants_a4s0 = base_dir + "/call_variants/autosomal_variants/a4s0/a4s0_filterGermline_autosomal_variants.{cell}.vcf",
		autosomal_variants_a6s0 = base_dir + "/call_variants/autosomal_variants/a6s0/a6s0_filterGermline_autosomal_variants.{cell}.vcf",
		autosomal_variants_a8s0 = base_dir + "/call_variants/autosomal_variants/a8s0/a8s0_filterGermline_autosomal_variants.{cell}.vcf",
		autosomal_variants_a10s0 = base_dir + "/call_variants/autosomal_variants/a10s0/a10s0_filterGermline_autosomal_variants.{cell}.vcf",

		autosomal_callable_region_a2s0 = base_dir + "/call_variants/autosomal_callable_region/a2s0/{cell}.families.analysis.calledSites.bed",
		autosomal_callable_region_a4s0 = base_dir + "/call_variants/autosomal_callable_region/a4s0/{cell}.families.analysis.calledSites.bed",
		autosomal_callable_region_a6s0 = base_dir + "/call_variants/autosomal_callable_region/a6s0/{cell}.families.analysis.calledSites.bed",
		autosomal_callable_region_a8s0 = base_dir + "/call_variants/autosomal_callable_region/a8s0/{cell}.families.analysis.calledSites.bed",
		autosomal_callable_region_a10s0 = base_dir + "/call_variants/autosomal_callable_region/a10s0/{cell}.families.analysis.calledSites.bed",

		burden_a2s0 = base_dir + "/burden_estimation/Dan/a2s0/a2s0_filterGermline_burden.{cell}.txt",
		burden_a4s0 = base_dir + "/burden_estimation/Dan/a4s0/a4s0_filterGermline_burden.{cell}.txt",
		burden_a6s0 = base_dir + "/burden_estimation/Dan/a6s0/a6s0_filterGermline_burden.{cell}.txt",
		burden_a8s0 = base_dir + "/burden_estimation/Dan/a8s0/a8s0_filterGermline_burden.{cell}.txt",
		burden_a10s0 = base_dir + "/burden_estimation/Dan/a10s0/a10s0_filterGermline_burden.{cell}.txt",

		germline_mutations_a2s0 = base_dir + "/call_variants/germline_mutations/all_germline_het_mutations_a2s0/{cell}_germline_het_mutations.vcf.gz",
		autosomal_germline_mutations_a2s0 = base_dir + "/call_variants/germline_mutations/a2s0/{cell}_germline_het_mutations_autosomal.vcf.gz",
	shell:
		"set +euo pipefail \n"

		# filter germline mutations and common SNPs
		"grep \"^#\" {input.called_variants_a2s0} > {base_dir}/call_variants/filter_germline_mutation/header.{wildcards.cell} \n"
		"{go_dir}/filterGermline -maxReads 0 -g {base_dir}/call_variants/filter_germline_mutation/header.{wildcards.cell} -i {input.called_variants_a2s0} -b {bulk_bam} -e {known_snp} > {output.Dan_filterGermline_called_variants} \n"
		"grep -v \"^#\" {output.Dan_filterGermline_called_variants} | sed \"s/:/\\t/g\" | sort -k 18 | uniq -c -f 17 | awk '{{if ($1==1) print $2\"\\t\"$3\"\\t\"$4\"\\t\"$5\"\\t\"$6\"\\t\"$7\"\\t\"$8\"\\t\"$9\"\\t\"$10\":\"$11\":\"$12\":\"$13\":\"$14\"\\t\"$15\":\"$16\":\"$17\":\"$18\":\"$19}}' | cat {base_dir}/call_variants/filter_germline_mutation/header.{wildcards.cell} - | bcftools view -v snps -Ov - | bcftools sort -Oz - -o {output.filter_germline_called_variants} \n"
		# "rm -f {base_dir}/call_variants/filter_germline_mutation/header.{wildcards.cell} \n"
		"bcftools view -h {output.filter_germline_called_variants} > {output.filter_germline_knownsnp_called_variants_a2s0} \n"
		
		# filter potential human DNA contamination
		"while IFS=$'\\t' read -r chr pos id ref alt other; do \n"
		"if [[ $chr == \\#* ]]; then continue; fi \n"
		"found=$(samtools mpileup -b {bulk_bam_list} -r $(echo \"$chr:$pos-$pos\") | awk  -v alt=\"$alt\" '{{found=0; for (i=5; i<=NF; i+=3) {{if (toupper($i) ~ alt) {{found=1; break;}}}}; print found; exit}}') \n"
		"if [[ $found -eq 0 ]]; then echo -e \"$chr\\t$pos\\t$id\\t$ref\\t$alt\\t$other\" >> {output.filter_germline_knownsnp_called_variants_a2s0}; fi \n"
		"done < {output.filter_germline_called_variants}\n"

		# stringency (variants)
		"bcftools filter -i 'PS+MS>=4' {output.filter_germline_knownsnp_called_variants_a2s0} > {output.filter_germline_knownsnp_called_variants_a4s0} \n"
		"bcftools filter -i 'PS+MS>=6' {output.filter_germline_knownsnp_called_variants_a2s0} > {output.filter_germline_knownsnp_called_variants_a6s0} \n"
		"bcftools filter -i 'PS+MS>=8' {output.filter_germline_knownsnp_called_variants_a2s0} > {output.filter_germline_knownsnp_called_variants_a8s0} \n"
		"bcftools filter -i 'PS+MS>=10' {output.filter_germline_knownsnp_called_variants_a2s0} > {output.filter_germline_knownsnp_called_variants_a10s0} \n"

		# autosomal variants
		"(bcftools sort -Oz {output.filter_germline_knownsnp_called_variants_a2s0} -o {base_dir}/call_variants/autosomal_variants/a2s0/a2s0_filterGermline.{wildcards.cell}.vcf.gz) && (tabix {base_dir}/call_variants/autosomal_variants/a2s0/a2s0_filterGermline.{wildcards.cell}.vcf.gz) \n"
		"(bcftools sort -Oz {output.filter_germline_knownsnp_called_variants_a4s0} -o {base_dir}/call_variants/autosomal_variants/a4s0/a4s0_filterGermline.{wildcards.cell}.vcf.gz) && (tabix {base_dir}/call_variants/autosomal_variants/a4s0/a4s0_filterGermline.{wildcards.cell}.vcf.gz) \n"
		"(bcftools sort -Oz {output.filter_germline_knownsnp_called_variants_a6s0} -o {base_dir}/call_variants/autosomal_variants/a6s0/a6s0_filterGermline.{wildcards.cell}.vcf.gz) && (tabix {base_dir}/call_variants/autosomal_variants/a6s0/a6s0_filterGermline.{wildcards.cell}.vcf.gz) \n"
		"(bcftools sort -Oz {output.filter_germline_knownsnp_called_variants_a8s0} -o {base_dir}/call_variants/autosomal_variants/a8s0/a8s0_filterGermline.{wildcards.cell}.vcf.gz) && (tabix {base_dir}/call_variants/autosomal_variants/a8s0/a8s0_filterGermline.{wildcards.cell}.vcf.gz) \n"
		"(bcftools sort -Oz {output.filter_germline_knownsnp_called_variants_a10s0} -o {base_dir}/call_variants/autosomal_variants/a10s0/a10s0_filterGermline.{wildcards.cell}.vcf.gz) && (tabix {base_dir}/call_variants/autosomal_variants/a10s0/a10s0_filterGermline.{wildcards.cell}.vcf.gz) \n"		
		"bcftools view -R /lab-share/Gene-Lee-e2/Public/home/shulin/Duplex_multiome/temp/hg38_autosomes.bed -o {output.autosomal_variants_a2s0} {base_dir}/call_variants/autosomal_variants/a2s0/a2s0_filterGermline.{wildcards.cell}.vcf.gz \n"
		"bcftools view -R /lab-share/Gene-Lee-e2/Public/home/shulin/Duplex_multiome/temp/hg38_autosomes.bed -o {output.autosomal_variants_a4s0} {base_dir}/call_variants/autosomal_variants/a4s0/a4s0_filterGermline.{wildcards.cell}.vcf.gz \n"
		"bcftools view -R /lab-share/Gene-Lee-e2/Public/home/shulin/Duplex_multiome/temp/hg38_autosomes.bed -o {output.autosomal_variants_a6s0} {base_dir}/call_variants/autosomal_variants/a6s0/a6s0_filterGermline.{wildcards.cell}.vcf.gz \n"
		"bcftools view -R /lab-share/Gene-Lee-e2/Public/home/shulin/Duplex_multiome/temp/hg38_autosomes.bed -o {output.autosomal_variants_a8s0} {base_dir}/call_variants/autosomal_variants/a8s0/a8s0_filterGermline.{wildcards.cell}.vcf.gz \n"
		"bcftools view -R /lab-share/Gene-Lee-e2/Public/home/shulin/Duplex_multiome/temp/hg38_autosomes.bed -o {output.autosomal_variants_a10s0} {base_dir}/call_variants/autosomal_variants/a10s0/a10s0_filterGermline.{wildcards.cell}.vcf.gz \n"
		"rm -f {base_dir}/call_variants/autosomal_variants/a2s0/a2s0_filterGermline.{wildcards.cell}.vcf.gz* \n"
		"rm -f {base_dir}/call_variants/autosomal_variants/a4s0/a4s0_filterGermline.{wildcards.cell}.vcf.gz* \n"
		"rm -f {base_dir}/call_variants/autosomal_variants/a6s0/a6s0_filterGermline.{wildcards.cell}.vcf.gz* \n"
		"rm -f {base_dir}/call_variants/autosomal_variants/a8s0/a8s0_filterGermline.{wildcards.cell}.vcf.gz* \n"
		"rm -f {base_dir}/call_variants/autosomal_variants/a10s0/a10s0_filterGermline.{wildcards.cell}.vcf.gz* \n"

		# stringency (covered regions)
		"awk '{{if ($7+$8>=8) print}}' {input.callable_region_a2s0} > {output.callable_region_a4s0} \n"
		"awk '{{if ($7+$8>=12) print}}' {input.callable_region_a2s0} > {output.callable_region_a6s0} \n"
		"awk '{{if ($7+$8>=16) print}}' {input.callable_region_a2s0} > {output.callable_region_a8s0} \n"
		"awk '{{if ($7+$8>=20) print}}' {input.callable_region_a2s0} > {output.callable_region_a10s0} \n"

		# autosomal covered regions
		"awk '$1 ~ /^chr[0-9]+$/ || $1 ~ /^chr[0-9][0-9]+$/ {{print}}' {input.callable_region_a2s0} > {output.autosomal_callable_region_a2s0} \n"
		"awk '$1 ~ /^chr[0-9]+$/ || $1 ~ /^chr[0-9][0-9]+$/ {{print}}' {output.callable_region_a4s0} > {output.autosomal_callable_region_a4s0} \n"
		"awk '$1 ~ /^chr[0-9]+$/ || $1 ~ /^chr[0-9][0-9]+$/ {{print}}' {output.callable_region_a6s0} > {output.autosomal_callable_region_a6s0} \n"
		"awk '$1 ~ /^chr[0-9]+$/ || $1 ~ /^chr[0-9][0-9]+$/ {{print}}' {output.callable_region_a8s0} > {output.autosomal_callable_region_a8s0} \n"
		"awk '$1 ~ /^chr[0-9]+$/ || $1 ~ /^chr[0-9][0-9]+$/ {{print}}' {output.callable_region_a10s0} > {output.autosomal_callable_region_a10s0} \n"

		# summarize results
		"{go_dir}/mcsBurdenCorrection -i {output.autosomal_variants_a2s0} -b {output.autosomal_callable_region_a2s0} -bTrim 0 -r {reference_genome} -genomeCacheInput /lab-share/Gene-Lee-e2/Public/home/shulin/Duplex_multiome/temp/Dan_genome_cache_hg38 > {output.burden_a2s0} \n"
		"{go_dir}/mcsBurdenCorrection -i {output.autosomal_variants_a4s0} -b {output.autosomal_callable_region_a4s0} -bTrim 0 -r {reference_genome} -genomeCacheInput /lab-share/Gene-Lee-e2/Public/home/shulin/Duplex_multiome/temp/Dan_genome_cache_hg38 > {output.burden_a4s0} \n"
		"{go_dir}/mcsBurdenCorrection -i {output.autosomal_variants_a6s0} -b {output.autosomal_callable_region_a6s0} -bTrim 0 -r {reference_genome} -genomeCacheInput /lab-share/Gene-Lee-e2/Public/home/shulin/Duplex_multiome/temp/Dan_genome_cache_hg38 > {output.burden_a6s0} \n"
		"{go_dir}/mcsBurdenCorrection -i {output.autosomal_variants_a8s0} -b {output.autosomal_callable_region_a8s0} -bTrim 0 -r {reference_genome} -genomeCacheInput /lab-share/Gene-Lee-e2/Public/home/shulin/Duplex_multiome/temp/Dan_genome_cache_hg38 > {output.burden_a8s0} \n"
		"{go_dir}/mcsBurdenCorrection -i {output.autosomal_variants_a10s0} -b {output.autosomal_callable_region_a10s0} -bTrim 0 -r {reference_genome} -genomeCacheInput /lab-share/Gene-Lee-e2/Public/home/shulin/Duplex_multiome/temp/Dan_genome_cache_hg38 > {output.burden_a10s0} \n"	

		# get germline mutation
		"(bcftools sort -Oz {input.called_variants_a2s0} -o {base_dir}/call_variants/germline_mutations/all_germline_het_mutations_a2s0/{wildcards.cell}.vcf.gz) && (tabix {base_dir}/call_variants/germline_mutations/all_germline_het_mutations_a2s0/{wildcards.cell}.vcf.gz) \n"
		"bcftools isec {base_dir}/call_variants/germline_mutations/all_germline_het_mutations_a2s0/{wildcards.cell}.vcf.gz {input.het_germline_mutations} -n =2 -w 1 -O z -o {output.germline_mutations_a2s0} \n"
		"tabix {output.germline_mutations_a2s0} \n"
		"bcftools view -R {autosomes_bed} -o {output.autosomal_germline_mutations_a2s0} {output.germline_mutations_a2s0} \n"

rule Collect_Dan_burden_estimation_withoutDuplexConsensus:
	input:
		burden_a2s0 = expand(base_dir + "/burden_estimation/Dan/{threshold}/{threshold}_filterGermline_burden.{cell_barcode}.txt", cell_barcode=cell_barcodes, threshold="a2s0"),
		burden_a4s0 = expand(base_dir + "/burden_estimation/Dan/{threshold}/{threshold}_filterGermline_burden.{cell_barcode}.txt", cell_barcode=cell_barcodes, threshold="a4s0"),
		burden_a6s0 = expand(base_dir + "/burden_estimation/Dan/{threshold}/{threshold}_filterGermline_burden.{cell_barcode}.txt", cell_barcode=cell_barcodes, threshold="a6s0"),
		burden_a8s0 = expand(base_dir + "/burden_estimation/Dan/{threshold}/{threshold}_filterGermline_burden.{cell_barcode}.txt", cell_barcode=cell_barcodes, threshold="a8s0"),
		burden_a10s0 = expand(base_dir + "/burden_estimation/Dan/{threshold}/{threshold}_filterGermline_burden.{cell_barcode}.txt", cell_barcode=cell_barcodes, threshold="a10s0")
	resources:
		runtime = 120,
		mem_mb = 500
	output:
		burden = expand(base_dir + "/burden_estimation/Dan/{threshold}_burden_results.txt", threshold=["a2s0", "a4s0", "a6s0", "a8s0", "a10s0"])
	shell:
		"for file in {base_dir}/burden_estimation/Dan/a2s0/a2s0_filterGermline_burden.*.txt; do echo -e \"$(head -n 4 $file | grep -oP '.*:\\t\\K[^\\n]*' | paste -s -d '\\t')\\t$file\" >> {base_dir}/burden_estimation/Dan/a2s0_burden_results.txt; done \n"
		"for file in {base_dir}/burden_estimation/Dan/a4s0/a4s0_filterGermline_burden.*.txt; do echo -e \"$(head -n 4 $file | grep -oP '.*:\\t\\K[^\\n]*' | paste -s -d '\\t')\\t$file\" >> {base_dir}/burden_estimation/Dan/a4s0_burden_results.txt; done \n"
		"for file in {base_dir}/burden_estimation/Dan/a6s0/a6s0_filterGermline_burden.*.txt; do echo -e \"$(head -n 4 $file | grep -oP '.*:\\t\\K[^\\n]*' | paste -s -d '\\t')\\t$file\" >> {base_dir}/burden_estimation/Dan/a6s0_burden_results.txt; done \n"
		"for file in {base_dir}/burden_estimation/Dan/a8s0/a8s0_filterGermline_burden.*.txt; do echo -e \"$(head -n 4 $file | grep -oP '.*:\\t\\K[^\\n]*' | paste -s -d '\\t')\\t$file\" >> {base_dir}/burden_estimation/Dan/a8s0_burden_results.txt; done \n"
		"for file in {base_dir}/burden_estimation/Dan/a10s0/a10s0_filterGermline_burden.*.txt; do echo -e \"$(head -n 4 $file | grep -oP '.*:\\t\\K[^\\n]*' | paste -s -d '\\t')\\t$file\" >> {base_dir}/burden_estimation/Dan/a10s0_burden_results.txt; done \n"

rule Autosomal_variants_summary:
	input:
		autosomal_variants_a2s0 = expand(base_dir + "/call_variants/autosomal_variants/a2s0/a2s0_filterGermline_autosomal_variants.{cell_barcode}.vcf", cell_barcode=cell_barcodes),
		autosomal_variants_a4s0 = expand(base_dir + "/call_variants/autosomal_variants/a4s0/a4s0_filterGermline_autosomal_variants.{cell_barcode}.vcf", cell_barcode=cell_barcodes),
		autosomal_variants_a6s0 = expand(base_dir + "/call_variants/autosomal_variants/a6s0/a6s0_filterGermline_autosomal_variants.{cell_barcode}.vcf", cell_barcode=cell_barcodes),
		autosomal_variants_a8s0 = expand(base_dir + "/call_variants/autosomal_variants/a8s0/a8s0_filterGermline_autosomal_variants.{cell_barcode}.vcf", cell_barcode=cell_barcodes),
		autosomal_variants_a10s0 = expand(base_dir + "/call_variants/autosomal_variants/a10s0/a10s0_filterGermline_autosomal_variants.{cell_barcode}.vcf", cell_barcode=cell_barcodes),
		autosomal_variants_a2s1 = expand(base_dir + "/call_variants/autosomal_variants/a2s1/a2s1_filterGermline_autosomal_variants.{cell_barcode}.vcf", cell_barcode=cell_barcodes),
		autosomal_variants_a4s2 = expand(base_dir + "/call_variants/autosomal_variants/a4s2/a4s2_filterGermline_autosomal_variants.{cell_barcode}.vcf", cell_barcode=cell_barcodes),
		autosomal_variants_a6s3 = expand(base_dir + "/call_variants/autosomal_variants/a6s3/a6s3_filterGermline_autosomal_variants.{cell_barcode}.vcf", cell_barcode=cell_barcodes),
		autosomal_variants_a8s4 = expand(base_dir + "/call_variants/autosomal_variants/a8s4/a8s4_filterGermline_autosomal_variants.{cell_barcode}.vcf", cell_barcode=cell_barcodes),
		autosomal_variants_a10s5 = expand(base_dir + "/call_variants/autosomal_variants/a10s5/a10s5_filterGermline_autosomal_variants.{cell_barcode}.vcf", cell_barcode=cell_barcodes),
	resources:
		runtime = 600,
		mem_mb = 250
	params:
		cell_barcode_list = expand("{cell_barcode}", cell_barcode=cell_barcodes)
	output:
		autosomal_variants_a2s0_summary = base_dir + "/call_variants/autosomal_variants/a2s0_autosome_variants.txt",
		autosomal_variants_a4s0_summary = base_dir + "/call_variants/autosomal_variants/a4s0_autosome_variants.txt",
		autosomal_variants_a6s0_summary = base_dir + "/call_variants/autosomal_variants/a6s0_autosome_variants.txt",
		autosomal_variants_a8s0_summary = base_dir + "/call_variants/autosomal_variants/a8s0_autosome_variants.txt",
		autosomal_variants_a10s0_summary = base_dir + "/call_variants/autosomal_variants/a10s0_autosome_variants.txt",
		autosomal_variants_a2s1_summary = base_dir + "/call_variants/autosomal_variants/a2s1_autosome_variants.txt",
		autosomal_variants_a4s2_summary = base_dir + "/call_variants/autosomal_variants/a4s2_autosome_variants.txt",
		autosomal_variants_a6s3_summary = base_dir + "/call_variants/autosomal_variants/a6s3_autosome_variants.txt",
		autosomal_variants_a8s4_summary = base_dir + "/call_variants/autosomal_variants/a8s4_autosome_variants.txt",
		autosomal_variants_a10s5_summary = base_dir + "/call_variants/autosomal_variants/a10s5_autosome_variants.txt",
	shell:
		"for cell in {params.cell_barcode_list}; do awk -v cell=\"$cell\" '{{if($0 !~ /^#/){{print $0, cell}}}}' {base_dir}/call_variants/autosomal_variants/a2s0/a2s0_filterGermline_autosomal_variants.${{cell}}.vcf; done > {output.autosomal_variants_a2s0_summary} \n"
		"for cell in {params.cell_barcode_list}; do awk -v cell=\"$cell\" '{{if($0 !~ /^#/){{print $0, cell}}}}' {base_dir}/call_variants/autosomal_variants/a4s0/a4s0_filterGermline_autosomal_variants.${{cell}}.vcf; done > {output.autosomal_variants_a4s0_summary} \n"
		"for cell in {params.cell_barcode_list}; do awk -v cell=\"$cell\" '{{if($0 !~ /^#/){{print $0, cell}}}}' {base_dir}/call_variants/autosomal_variants/a6s0/a6s0_filterGermline_autosomal_variants.${{cell}}.vcf; done > {output.autosomal_variants_a6s0_summary} \n"
		"for cell in {params.cell_barcode_list}; do awk -v cell=\"$cell\" '{{if($0 !~ /^#/){{print $0, cell}}}}' {base_dir}/call_variants/autosomal_variants/a8s0/a8s0_filterGermline_autosomal_variants.${{cell}}.vcf; done > {output.autosomal_variants_a8s0_summary} \n"
		"for cell in {params.cell_barcode_list}; do awk -v cell=\"$cell\" '{{if($0 !~ /^#/){{print $0, cell}}}}' {base_dir}/call_variants/autosomal_variants/a10s0/a10s0_filterGermline_autosomal_variants.${{cell}}.vcf; done > {output.autosomal_variants_a10s0_summary} \n"
		"for cell in {params.cell_barcode_list}; do awk -v cell=\"$cell\" '{{if($0 !~ /^#/){{print $0, cell}}}}' {base_dir}/call_variants/autosomal_variants/a2s1/a2s1_filterGermline_autosomal_variants.${{cell}}.vcf; done > {output.autosomal_variants_a2s1_summary} \n"
		"for cell in {params.cell_barcode_list}; do awk -v cell=\"$cell\" '{{if($0 !~ /^#/){{print $0, cell}}}}' {base_dir}/call_variants/autosomal_variants/a4s2/a4s2_filterGermline_autosomal_variants.${{cell}}.vcf; done > {output.autosomal_variants_a4s2_summary} \n"
		"for cell in {params.cell_barcode_list}; do awk -v cell=\"$cell\" '{{if($0 !~ /^#/){{print $0, cell}}}}' {base_dir}/call_variants/autosomal_variants/a6s3/a6s3_filterGermline_autosomal_variants.${{cell}}.vcf; done > {output.autosomal_variants_a6s3_summary} \n"
		"for cell in {params.cell_barcode_list}; do awk -v cell=\"$cell\" '{{if($0 !~ /^#/){{print $0, cell}}}}' {base_dir}/call_variants/autosomal_variants/a8s4/a8s4_filterGermline_autosomal_variants.${{cell}}.vcf; done > {output.autosomal_variants_a8s4_summary} \n"
		"for cell in {params.cell_barcode_list}; do awk -v cell=\"$cell\" '{{if($0 !~ /^#/){{print $0, cell}}}}' {base_dir}/call_variants/autosomal_variants/a10s5/a10s5_filterGermline_autosomal_variants.${{cell}}.vcf; done > {output.autosomal_variants_a10s5_summary} \n"

rule Filtering_loose_stringency:
	input:
		read_families = base_dir + "/read_families/{cell}.families.bam",
		readfamily_region = base_dir + "/read_families/{cell}.families.bed",
	resources:
		runtime = 1200,
		mem_mb = 64000,
		tasks = 4
	output:
		called_variants_a2s0 = base_dir + "/call_variants/Dan/a2s0_0minReadFamilyLength/{cell}.vcf",
		callable_region_a2s0 = base_dir + "/read_families/a2s0_0minReadFamilyLength/{cell}.families.analysis.calledSites.bed",
		analysis_region_a2s0 = base_dir + "/read_families/a2s0_0minReadFamilyLength/{cell}.families.analysis.bed",

		Dan_filterGermline_called_variants = base_dir + "/call_variants/filter_germline_mutation/a2s0_AF" + max_VAF_clonal_mutation + "/Dan_filterGermline.{cell}.vcf",
		filter_germline_called_variants = base_dir + "/call_variants/filter_germline_mutation/a2s0_AF" + max_VAF_clonal_mutation + "/include_knownsnp.{cell}.vcf",
		filter_germline_knownsnp_called_variants = base_dir + "/call_variants/filter_germline_mutation/a2s0_AF" + max_VAF_clonal_mutation + "/a2s0_filterGermline.{cell}.vcf",
	shell:
		"set +euo pipefail \n"
		"{go_dir}/mcsCallVariants -r {reference_genome} -i {input.read_families} -o {output.called_variants_a2s0} -b {input.readfamily_region} -e {masked_region} -a 2 -s 0 -threads {resources.tasks} -ignoreEnds 10 -minAF 1 -minReadFamilyLength 0 \n"
		"mv {base_dir}/read_families/{wildcards.cell}.families.analysis.calledSites.bed {output.callable_region_a2s0} \n"
		"mv {base_dir}/read_families/{wildcards.cell}.families.analysis.bed {output.analysis_region_a2s0} \n"	


		"grep \"^#\" {output.called_variants_a2s0} > {base_dir}/call_variants/filter_germline_mutation/header.{wildcards.cell} \n"
		"{go_dir}/filterGermline -maxReadFrac {max_VAF_clonal_mutation} -g {base_dir}/call_variants/filter_germline_mutation/header.{wildcards.cell} -i {output.called_variants_a2s0} -b {bulk_bam} -e {known_snp} > {output.Dan_filterGermline_called_variants} \n"
		"grep -v \"^#\" {output.Dan_filterGermline_called_variants} | sed \"s/:/\\t/g\" | sort -k 18 | uniq -c -f 17 | awk '{{if ($1==1) print $2\"\\t\"$3\"\\t\"$4\"\\t\"$5\"\\t\"$6\"\\t\"$7\"\\t\"$8\"\\t\"$9\"\\t\"$10\":\"$11\":\"$12\":\"$13\":\"$14\"\\t\"$15\":\"$16\":\"$17\":\"$18\":\"$19}}' | cat {base_dir}/call_variants/filter_germline_mutation/header.{wildcards.cell} - | bcftools view -v snps -Ov - | bcftools sort -Oz - -o {output.filter_germline_called_variants} \n"
		# "rm -f {base_dir}/call_variants/filter_germline_mutation/header.{wildcards.cell} \n"
		"bcftools view -h {output.filter_germline_called_variants} > {output.filter_germline_knownsnp_called_variants} \n"
		"while IFS=$'\\t' read -r chr pos id ref alt other; do \n"
		"if [[ $chr == \\#* ]]; then continue; fi \n"
		"found=$(samtools mpileup -b {bulk_bam_list} -r $(echo \"$chr:$pos-$pos\") | awk  -v alt=\"$alt\" '{{found=0; for (i=5; i<=NF; i+=3) {{if (toupper($i) ~ alt) {{found=1; break;}}}}; print found; exit}}') \n"
		"if [[ $found -eq 0 ]]; then echo -e \"$chr\\t$pos\\t$id\\t$ref\\t$alt\\t$other\" >> {output.filter_germline_knownsnp_called_variants}; fi \n"
		"done < {output.filter_germline_called_variants}"








